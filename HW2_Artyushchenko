{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/stafars/sem-3_diart_mipt_hw/blob/main/Dmitry_Art_%22%D0%94%D0%BE%D0%BC%D0%B0%D1%88%D0%BD%D0%B5%D0%B5_%D0%B7%D0%B0%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5_2_%D0%90%D0%BD%D0%B0%D0%BB%D0%B8%D1%82%D0%B8%D0%BA_%D0%BC%D0%BE%D0%B1%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE_%D1%82%D1%80%D0%B0%D1%84%D0%B8%D0%BA%D0%B0_ipynb%22.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Источник ДЗ: https://colab.research.google.com/drive/1eqzStU9NcxIQPw4rmo0tQBqXMHcUNnQ9"
      ],
      "metadata": {
        "id": "4AJjU-cHewHX"
      },
      "id": "4AJjU-cHewHX",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install marimo -qq\n",
        "import marimo as mo"
      ],
      "metadata": {
        "id": "UOkG3QJOQJUn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40c2ab14-8d41-44ae-b2ac-2be647bd1d69"
      },
      "id": "UOkG3QJOQJUn",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m34.0/34.0 MB\u001b[0m \u001b[31m53.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m70.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.2/3.2 MB\u001b[0m \u001b[31m92.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m213.6/213.6 kB\u001b[0m \u001b[31m15.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m266.2/266.2 kB\u001b[0m \u001b[31m19.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Домашнее задание 2\n",
        "### Цель задания\n",
        "\n",
        "Сегодня вы попробуете себя в роли аналитика мобильного трафика. Вам будет нужно помочь в принятии взвешенных решений по UX  и решить проблемы мошенничества в сфере интернет-рекламы. Защитите компанию, размещающую онлайн-рекламу от риска мошенничества с кликами, чтобы не было искажения данных о кликах и напрасной траты средств.\n",
        "\n",
        "\n",
        "### Навыки\n",
        "\n",
        "|Архитектура|Базы данных|Форматы данных|Инструменты|Коммуникации|ИИ     |\n",
        "|-----------|-----------|--------------|-----------|------------|-------|\n",
        "|Отсутствует|MySQL,PostgreSQL|jpg/png|Pillow|нет         |ChatGPT|\n",
        "\n",
        "\n",
        "### Условия\n",
        "\n",
        "Можно пользоваться любыми языковыми моделями.\n",
        "\n",
        "###  Формат сдачи и отправка задания\n",
        "\n",
        "Итоговый блокнот нужно разместить на GitLab либо на GitHub («запушить» в любом формате .py или .ipynb) и поделиться ссылкой на файл, убедившись в видимости репозитория.\n",
        "\n",
        "###  Сроки выполнения задания\n",
        "\n",
        "Дедлайн задания указан на платформе.\n",
        "\n",
        "###  Критерии оценивания\n",
        "\n",
        "| Критерий | Вес | Описание |\n",
        "|----------|-----|-----------|\n",
        "| **Основная функциональность** | 2 | Все основные требования задания выполнены корректно (задания 2 и 4) |\n",
        "| | 1 | Большая часть требований выполнена, но есть незначительные недочеты или пропуски |\n",
        "|  | 0 | Основные требования не выполнены или выполнены некорректно |\n",
        "| **Выбор алгоритма** | 1.5 | Выбранные подходы и алгоритмы (например, groupby().sum()) оптимальны и уместны для задачи |\n",
        "|  | 0.5 | Подходы в целом верны, но могли бы быть более эффективными или уместными |\n",
        "|  | 0 | Подходы не соответствуют задаче |\n",
        "| **Точность реализации** | 1.5 | Код реализован корректно, без ошибок, расчеты точны, логика полностью соответствует задаче |\n",
        "|  | 0.5 | Есть мелкие неточности или логические ошибки, не влияющие критически на результат |\n",
        "|  | 0 | Содержит существенные ошибки, препятствующие получению верного результата |\n",
        "| **Обработка краевых случаев** | 1 | Код устойчив к различным входным данным, учтены потенциальные краевые условия |\n",
        "|  | 0 | Краевые случаи не учтены, возможны ошибки в специфических сценариях |\n",
        "| **Документация к коду** | 1 | Код прокомментирован, комментарии ясны, помогают понять логику |\n",
        "|  | 0 | Комментарии отсутствуют или бесполезны |\n",
        "| **Объяснение результатов** | 1 | Выводы по результатам работы кода четкие, логичные и обоснованные данными |\n",
        "|  | 0 | Выводы отсутствуют или не имеют отношения к данным |\n",
        "| **Стиль кода** | 1 | Код читаем, соответствует стандартам PEP-8 |\n",
        "|  | 0 | Код плохо читаем, стандарты стиля не соблюдены |\n",
        "| **Анализ ошибок и отладка** | 1 | Способность выявить, понять и исправить ошибки показана полностью и эффективно |\n",
        "|  | 0 | Код содержит ошибки, они не исправлены или понимание их причин отсутствует |\n",
        "\n",
        "**Максимальный балл за выполненную домашнюю работу: 10 баллов**\n",
        "\n",
        "**Дополнительные условия оценки:**\n",
        "\n",
        "Можно сдать работу через обычный Google Colab без начисления штрафных баллов и поделиться ссылкой на файл.\n",
        "\n",
        "**Как будет проверяться:**\n",
        "\n",
        "Работа будет проверяться преподавателем вручную в течение максимум одной недели."
      ],
      "metadata": {
        "id": "EfD_toR2Pi2d"
      },
      "id": "EfD_toR2Pi2d"
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "id": "bkHC",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 222
        },
        "id": "bkHC",
        "outputId": "2393dfde-eaea-4b01-e8c5-c5c3a66f50ee"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Html()"
            ],
            "text/html": [
              "<img src='http://static.lukew.com/large_smartphones1.png' style='width: 200px;height: 200px' />"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "#Обычно реальные пользователи тапают на экране в нижней зоне, потому что так удобнее\n",
        "imga = mo.image(src=\"http://static.lukew.com/large_smartphones1.png\", width=200, height=200,)\n",
        "imga"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "lEQa",
      "metadata": {
        "marimo": {
          "config": {
            "hide_code": true
          },
          "name": "task1"
        },
        "id": "lEQa"
      },
      "source": [
        "### **Задание 1**\n",
        "\n",
        "Чтобы работать с изображениями, вам понадобится библиотека pillow.\n",
        "\n",
        "Скопируйте код, скачайте изображение на локальный компьютер: стандартный метод Image.open не может открывать нелокальные файлы.\n",
        "\n",
        "Отобразите картинку в блокноте. Сравните, сколько действий понадобилось в сравнении с однострочником **mo.image**\n",
        "\n",
        "```python\n",
        "from PIL import Image\n",
        "imgb = Image.open(r'http://static.lukew.com/large_smartphones1.png')\n",
        "imgb\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "PKri",
      "metadata": {
        "id": "PKri",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "76d28573-b1cc-48dd-f588-c4fe5adcb2e3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<PIL.PngImagePlugin.PngImageFile image mode=RGB size=1402x984>"
            ],
            "image/png": "\n",
            "image/jpeg": "\n"
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "#Скопируйте код сюда и запустите\n",
        "from PIL import Image\n",
        "imgb = Image.open(r'large_smartphones1.png')\n",
        "imgb"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Чтобы выполнить задание 1 потребовалось: 1. Скачать изображение, 2. Расположить в нужную папку, 3. Запустить срезу разработки (anaconda → jupyter), 4. Запустить скрипт\n",
        "# Есть требуется работать в команде или удаленно с разных ПК, то такой подход (хранить локально) неудобен, но в ситуациях недоступности интернета / сайта может выручить"
      ],
      "metadata": {
        "id": "a-hVfER76hyt"
      },
      "id": "a-hVfER76hyt",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "Xref",
      "metadata": {
        "marimo": {
          "config": {
            "hide_code": true
          }
        },
        "id": "Xref"
      },
      "source": [
        "В команде говорят о том, что на рекламных блоках в приложении кликают боты. Похоже, данные это подтверждают.\n",
        "\n",
        "Обратите внимание на колонку is_attributed, где 0 — это обычный пользователь, а 1 — это бот."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "id": "SFPL",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "SFPL",
        "outputId": "a96fa807-d848-4f4e-e42f-5e4c7367df90"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         ip  app  device  os  channel           click_time attributed_time  \\\n",
              "0     87540   12       1  13      497  2017-11-07 09:30:38             NaN   \n",
              "1    105560   25       1  17      259  2017-11-07 13:40:27             NaN   \n",
              "2    101424   12       1  19      212  2017-11-07 18:05:24             NaN   \n",
              "3     94584   13       1  13      477  2017-11-07 04:58:08             NaN   \n",
              "4     68413   12       1   1      178  2017-11-09 09:00:09             NaN   \n",
              "..      ...  ...     ...  ..      ...                  ...             ...   \n",
              "995   10716   12       1  26      178  2017-11-08 00:54:22             NaN   \n",
              "996    4744    1       1   4      134  2017-11-08 06:24:53             NaN   \n",
              "997  120721    1       1  13      134  2017-11-06 21:40:57             NaN   \n",
              "998  118582   14       1  17      489  2017-11-09 14:19:10             NaN   \n",
              "999  105679   12       1  13      497  2017-11-07 14:48:46             NaN   \n",
              "\n",
              "     is_attributed  \n",
              "0                0  \n",
              "1                0  \n",
              "2                0  \n",
              "3                0  \n",
              "4                0  \n",
              "..             ...  \n",
              "995              0  \n",
              "996              0  \n",
              "997              0  \n",
              "998              0  \n",
              "999              0  \n",
              "\n",
              "[1000 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ef103dd3-dd05-4b94-9a87-bb0222c81e27\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ip</th>\n",
              "      <th>app</th>\n",
              "      <th>device</th>\n",
              "      <th>os</th>\n",
              "      <th>channel</th>\n",
              "      <th>click_time</th>\n",
              "      <th>attributed_time</th>\n",
              "      <th>is_attributed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>87540</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>497</td>\n",
              "      <td>2017-11-07 09:30:38</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>105560</td>\n",
              "      <td>25</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>259</td>\n",
              "      <td>2017-11-07 13:40:27</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>101424</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>19</td>\n",
              "      <td>212</td>\n",
              "      <td>2017-11-07 18:05:24</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>94584</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>477</td>\n",
              "      <td>2017-11-07 04:58:08</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>68413</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>178</td>\n",
              "      <td>2017-11-09 09:00:09</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>10716</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>26</td>\n",
              "      <td>178</td>\n",
              "      <td>2017-11-08 00:54:22</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>4744</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>134</td>\n",
              "      <td>2017-11-08 06:24:53</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>120721</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>134</td>\n",
              "      <td>2017-11-06 21:40:57</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>118582</td>\n",
              "      <td>14</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>489</td>\n",
              "      <td>2017-11-09 14:19:10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>105679</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>497</td>\n",
              "      <td>2017-11-07 14:48:46</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef103dd3-dd05-4b94-9a87-bb0222c81e27')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ef103dd3-dd05-4b94-9a87-bb0222c81e27 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ef103dd3-dd05-4b94-9a87-bb0222c81e27');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-35a062e2-75bc-4654-bce2-ccd2027069fa\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-35a062e2-75bc-4654-bce2-ccd2027069fa')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-35a062e2-75bc-4654-bce2-ccd2027069fa button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "mobile_ads_fraud_dataset",
              "summary": "{\n  \"name\": \"mobile_ads_fraud_dataset\",\n  \"rows\": 100000,\n  \"fields\": [\n    {\n      \"column\": \"ip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 69835,\n        \"min\": 9,\n        \"max\": 364757,\n        \"num_unique_values\": 34857,\n        \"samples\": [\n          86646,\n          66084,\n          143274\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"app\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 1,\n        \"max\": 551,\n        \"num_unique_values\": 161,\n        \"samples\": [\n          216,\n          551,\n          363\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"device\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 259,\n        \"min\": 0,\n        \"max\": 3867,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          2980,\n          351,\n          558\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"os\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55,\n        \"min\": 0,\n        \"max\": 866,\n        \"num_unique_values\": 130,\n        \"samples\": [\n          58,\n          42,\n          41\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"channel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 129,\n        \"min\": 3,\n        \"max\": 498,\n        \"num_unique_values\": 161,\n        \"samples\": [\n          150,\n          182,\n          332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"click_time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 80350,\n        \"samples\": [\n          \"2017-11-07 17:39:59\",\n          \"2017-11-09 05:21:56\",\n          \"2017-11-07 14:44:06\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"attributed_time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2017-11-06 17:19:04\",\n        \"max\": \"2017-11-09 15:28:15\",\n        \"num_unique_values\": 227,\n        \"samples\": [\n          \"2017-11-08 09:46:42\",\n          \"2017-11-09 01:13:01\",\n          \"2017-11-07 04:00:09\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_attributed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "file_id = '10__JGvVpWUzzucVHLcBdbPyVRYUeQ8Nl'\n",
        "url = f'https://drive.google.com/uc?export=download&id={file_id}'\n",
        "mobile_ads_fraud_dataset = pd.read_csv(url)\n",
        "mobile_ads_fraud_dataset.head(1000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "id": "vblA",
      "metadata": {
        "marimo": {
          "config": {
            "hide_code": true
          }
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 800
        },
        "id": "vblA",
        "outputId": "7f7be689-75f9-4e3b-c96d-ff249a8a04af"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Html()"
            ],
            "text/html": [
              "<marimo-accordion data-labels='[&quot;&lt;span class=&#92;&quot;markdown prose dark:prose-invert&#92;&quot;&gt;&lt;span class=&#92;&quot;paragraph&#92;&quot;&gt;Создадим прототип&lt;/span&gt;&lt;/span&gt;&quot;,&quot;&lt;span class=&#92;&quot;markdown prose dark:prose-invert&#92;&quot;&gt;&lt;span class=&#92;&quot;paragraph&#92;&quot;&gt;Запустим тест&lt;/span&gt;&lt;/span&gt;&quot;,&quot;&lt;span class=&#92;&quot;markdown prose dark:prose-invert&#92;&quot;&gt;&lt;span class=&#92;&quot;paragraph&#92;&quot;&gt;Посмотрим на данные&lt;/span&gt;&lt;/span&gt;&quot;,&quot;&lt;span class=&#92;&quot;markdown prose dark:prose-invert&#92;&quot;&gt;&lt;span class=&#92;&quot;paragraph&#92;&quot;&gt;Посчитаем клики&lt;/span&gt;&lt;/span&gt;&quot;]' data-multiple='false'><div><span class=\"markdown prose dark:prose-invert\"><div class=\"language-carbon codehilite\"><pre><span></span><code><span class=\"nx\">services</span><span class=\"p\">:</span>\n",
              "<span class=\"w\">  </span><span class=\"nx\">mongo</span><span class=\"p\">:</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">restart</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">always</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">container_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">quant</span><span class=\"o\">-</span><span class=\"nx\">ux</span><span class=\"o\">-</span><span class=\"nx\">mongo</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">image</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">mongo</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">volumes</span><span class=\"p\">:</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"nx\">data</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"nx\">data</span><span class=\"o\">/</span><span class=\"nx\">db</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">pth</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nx\">the</span><span class=\"w\"> </span><span class=\"nx\">data</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"w\"> </span><span class=\"nx\">be</span><span class=\"w\"> </span><span class=\"nx\">stored</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"nx\">kept</span><span class=\"w\"> </span><span class=\"nx\">on</span><span class=\"w\"> </span><span class=\"nx\">your</span><span class=\"w\"> </span><span class=\"nx\">host</span><span class=\"w\"> </span><span class=\"nx\">machine</span><span class=\"w\"> </span><span class=\"k\">is</span><span class=\"w\"> </span><span class=\"nx\">on</span><span class=\"w\"> </span><span class=\"nx\">the</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"w\"> </span><span class=\"nx\">side</span><span class=\"w\"> </span><span class=\"nx\">of</span><span class=\"w\"> </span><span class=\"nx\">the</span><span class=\"w\"> </span><span class=\"s\">&quot;:&quot;</span>\n",
              "<span class=\"w\">  </span><span class=\"nx\">qux</span><span class=\"o\">-</span><span class=\"nx\">fe</span><span class=\"p\">:</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">restart</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">always</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">container_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">quant</span><span class=\"o\">-</span><span class=\"nx\">ux</span><span class=\"o\">-</span><span class=\"nx\">frontend</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">image</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">bmcgonag</span><span class=\"o\">/</span><span class=\"nx\">qux</span><span class=\"o\">-</span><span class=\"nx\">fe</span>\n",
              "<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">image</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">bmcgonag</span><span class=\"o\">/</span><span class=\"nx\">qux</span><span class=\"o\">-</span><span class=\"nx\">fe</span><span class=\"o\">-</span><span class=\"nx\">arm64</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">environment</span><span class=\"p\">:</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_PROXY_URL</span><span class=\"p\">=</span><span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"c1\">//quant-ux-backend:8080        # this is the path the front end uses to talk tot he backend</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">links</span><span class=\"p\">:</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">mongo</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">qux</span><span class=\"o\">-</span><span class=\"nx\">be</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">ports</span><span class=\"p\">:</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">8082</span><span class=\"p\">:</span><span class=\"mi\">8082</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">change</span><span class=\"w\"> </span><span class=\"nx\">the</span><span class=\"w\"> </span><span class=\"nx\">left</span><span class=\"w\"> </span><span class=\"nx\">side</span><span class=\"w\"> </span><span class=\"nx\">port</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">your</span><span class=\"w\"> </span><span class=\"nx\">host</span><span class=\"w\"> </span><span class=\"nx\">machine</span><span class=\"w\"> </span><span class=\"nx\">already</span><span class=\"w\"> </span><span class=\"nx\">has</span><span class=\"w\"> </span><span class=\"mi\">8082</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"nx\">use</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">depends_on</span><span class=\"p\">:</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">qux</span><span class=\"o\">-</span><span class=\"nx\">be</span>\n",
              "<span class=\"w\">  </span><span class=\"nx\">qux</span><span class=\"o\">-</span><span class=\"nx\">be</span><span class=\"p\">:</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">restart</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">always</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">container_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">quant</span><span class=\"o\">-</span><span class=\"nx\">ux</span><span class=\"o\">-</span><span class=\"nx\">backend</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">image</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">bmcgonag</span><span class=\"o\">/</span><span class=\"nx\">qux</span><span class=\"o\">-</span><span class=\"nx\">be</span>\n",
              "<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">image</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nx\">bmcgonag</span><span class=\"o\">/</span><span class=\"nx\">qux</span><span class=\"o\">-</span><span class=\"nx\">be</span><span class=\"o\">-</span><span class=\"nx\">arm64</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">environment</span><span class=\"p\">:</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_HTTP_HOST</span><span class=\"p\">=</span><span class=\"nx\">http</span><span class=\"p\">:</span><span class=\"c1\">//quant-ux-frontend:8082        # this is the path the backend uses to talk to the front end</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_HTTP_PORT</span><span class=\"p\">=</span><span class=\"mi\">8080</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">This</span><span class=\"w\"> </span><span class=\"k\">is</span><span class=\"w\"> </span><span class=\"nx\">the</span><span class=\"w\"> </span><span class=\"nx\">port</span><span class=\"w\"> </span><span class=\"nx\">the</span><span class=\"w\"> </span><span class=\"nx\">backend</span><span class=\"w\"> </span><span class=\"nx\">will</span><span class=\"w\"> </span><span class=\"nx\">use</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_MONGO_DB_NAME</span><span class=\"p\">=</span><span class=\"nx\">quantux</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">the</span><span class=\"w\"> </span><span class=\"nx\">database</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"nx\">collection</span><span class=\"w\"> </span><span class=\"nx\">name</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"nx\">mongodb</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_MONGO_TABLE_PREFIX</span><span class=\"p\">=</span><span class=\"nx\">quantux</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">table</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"nx\">document</span><span class=\"w\"> </span><span class=\"nx\">prefix</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"nx\">mongodb</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_MONGO_CONNECTION_STRING</span><span class=\"p\">=</span><span class=\"nx\">mongodb</span><span class=\"p\">:</span><span class=\"c1\">//quant-ux-mongo:27017        # this assumes your mongodb container will be called &quot;quant-ux-mongo&quot; in the docker-compose file</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_MAIL_USER</span><span class=\"p\">=</span><span class=\"nx\">mail_admin</span><span class=\"err\">@</span><span class=\"nx\">example</span><span class=\"p\">.</span><span class=\"nx\">com</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">this</span><span class=\"w\"> </span><span class=\"nx\">should</span><span class=\"w\"> </span><span class=\"nx\">be</span><span class=\"w\"> </span><span class=\"nx\">your</span><span class=\"w\"> </span><span class=\"nx\">smtp</span><span class=\"w\"> </span><span class=\"nx\">email</span><span class=\"w\"> </span><span class=\"nx\">user</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_MAIL_PASSWORD</span><span class=\"p\">=</span><span class=\"nx\">sTr0ngPa55w0Rd</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">this</span><span class=\"w\"> </span><span class=\"nx\">should</span><span class=\"w\"> </span><span class=\"nx\">be</span><span class=\"w\"> </span><span class=\"nx\">your</span><span class=\"w\"> </span><span class=\"nx\">smtp</span><span class=\"w\"> </span><span class=\"nx\">email</span><span class=\"w\"> </span><span class=\"nx\">password</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_MAIL_HOST</span><span class=\"p\">=</span><span class=\"m m-Double\">127.0.0.1</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">this</span><span class=\"w\"> </span><span class=\"nx\">should</span><span class=\"w\"> </span><span class=\"nx\">be</span><span class=\"w\"> </span><span class=\"nx\">your</span><span class=\"w\"> </span><span class=\"nx\">smtp</span><span class=\"w\"> </span><span class=\"nx\">host</span><span class=\"w\"> </span><span class=\"nx\">address</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_JWT_PASSWORD</span><span class=\"p\">=</span><span class=\"nx\">some</span><span class=\"o\">-</span><span class=\"nx\">long</span><span class=\"o\">-</span><span class=\"kt\">string</span><span class=\"o\">-</span><span class=\"nx\">of</span><span class=\"o\">-</span><span class=\"nx\">mix</span><span class=\"o\">-</span><span class=\"k\">case</span><span class=\"o\">-</span><span class=\"nx\">chars</span><span class=\"o\">-</span><span class=\"k\">and</span><span class=\"o\">-</span><span class=\"nx\">nums</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">you</span><span class=\"w\"> </span><span class=\"nx\">should</span><span class=\"w\"> </span><span class=\"nx\">change</span><span class=\"w\"> </span><span class=\"nx\">this</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">real</span><span class=\"w\"> </span><span class=\"nx\">JWT</span><span class=\"w\"> </span><span class=\"nx\">secret</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_IMAGE_FOLDER_USER</span><span class=\"p\">=</span><span class=\"o\">/</span><span class=\"nx\">qux</span><span class=\"o\">-</span><span class=\"nx\">images</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">just</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">folder</span><span class=\"w\"> </span><span class=\"nx\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">change</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">you</span><span class=\"w\"> </span><span class=\"k\">like</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_IMAGE_FOLDER_APPS</span><span class=\"p\">=</span><span class=\"o\">/</span><span class=\"nx\">qux</span><span class=\"o\">-</span><span class=\"nx\">image</span><span class=\"o\">-</span><span class=\"nx\">apps</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">just</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"nx\">folder</span><span class=\"w\"> </span><span class=\"nx\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">change</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">you</span><span class=\"w\"> </span><span class=\"k\">like</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">QUX_DEBUG</span><span class=\"p\">=</span><span class=\"kc\">false</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">valid</span><span class=\"w\"> </span><span class=\"nx\">values</span><span class=\"w\"> </span><span class=\"nx\">are</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"k\">or</span><span class=\"w\"> </span><span class=\"kc\">false</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">TZ</span><span class=\"p\">=</span><span class=\"nx\">Europe</span><span class=\"o\">/</span><span class=\"nx\">Moscow</span><span class=\"w\">        </span><span class=\"err\">#</span><span class=\"w\"> </span><span class=\"nx\">change</span><span class=\"w\"> </span><span class=\"nx\">to</span><span class=\"w\"> </span><span class=\"nx\">your</span><span class=\"w\"> </span><span class=\"nx\">timezone</span>\n",
              "<span class=\"w\">    </span><span class=\"nx\">depends_on</span><span class=\"p\">:</span>\n",
              "<span class=\"w\">      </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"nx\">mongo</span>\n",
              "</code></pre></div></span></div><div><span class=\"markdown prose dark:prose-invert\"><span class=\"paragraph\">ссылка на <a href=\"http://45.153.69.219:8082/#/test.html?h=a2aa10aHIk8utSEvpzoSLkesWFHEO2MQUs6nxMFWf0VvfOwpFLIcQFLepIqy&amp;ln=ru\" rel=\"noopener\" target=\"_blank\">тест</a></span></span></div><div><marimo-ui-element object-id='3b0bfd05-cd51-2d27-a052-3d44fd09fb33' random-id='3b0bfd05-cd51-2d27-a052-3d44fd09fb33'><marimo-table data-initial-value='[]' data-label='null' data-data='&quot;[{&#92;&quot;_marimo_row_id&#92;&quot;:0,&#92;&quot;session&#92;&quot;:&#92;&quot;S1746967768665_2927&#92;&quot;,&#92;&quot;screen&#92;&quot;:&#92;&quot;s10000_23817&#92;&quot;,&#92;&quot;widget&#92;&quot;:&#92;&quot;w10002_45621&#92;&quot;,&#92;&quot;type&#92;&quot;:&#92;&quot;WidgetClick&#92;&quot;,&#92;&quot;time&#92;&quot;:1746967770281,&#92;&quot;scrollTop&#92;&quot;:0,&#92;&quot;x&#92;&quot;:0.506,&#92;&quot;y&#92;&quot;:0.629,&#92;&quot;appID&#92;&quot;:&#92;&quot;68209a325c16386569ba37d3&#92;&quot;,&#92;&quot;widgetName&#92;&quot;:&#92;&quot;Primary Button&#92;&quot;,&#92;&quot;screenName&#92;&quot;:&#92;&quot;Screen&#92;&quot;},{&#92;&quot;_marimo_row_id&#92;&quot;:1,&#92;&quot;session&#92;&quot;:&#92;&quot;S1746967768665_2927&#92;&quot;,&#92;&quot;screen&#92;&quot;:&#92;&quot;s10000_23817&#92;&quot;,&#92;&quot;widget&#92;&quot;:&#92;&quot;w10001_12307&#92;&quot;,&#92;&quot;type&#92;&quot;:&#92;&quot;WidgetClick&#92;&quot;,&#92;&quot;time&#92;&quot;:1746967771832,&#92;&quot;scrollTop&#92;&quot;:0,&#92;&quot;x&#92;&quot;:0.514,&#92;&quot;y&#92;&quot;:0.453,&#92;&quot;appID&#92;&quot;:&#92;&quot;68209a325c16386569ba37d3&#92;&quot;,&#92;&quot;widgetName&#92;&quot;:&#92;&quot;Box&#92;&quot;,&#92;&quot;screenName&#92;&quot;:&#92;&quot;Screen&#92;&quot;},{&#92;&quot;_marimo_row_id&#92;&quot;:2,&#92;&quot;session&#92;&quot;:&#92;&quot;S1746967768665_2927&#92;&quot;,&#92;&quot;screen&#92;&quot;:&#92;&quot;s10000_23817&#92;&quot;,&#92;&quot;widget&#92;&quot;:&#92;&quot;w10002_45621&#92;&quot;,&#92;&quot;type&#92;&quot;:&#92;&quot;WidgetClick&#92;&quot;,&#92;&quot;time&#92;&quot;:1746967772625,&#92;&quot;scrollTop&#92;&quot;:0,&#92;&quot;x&#92;&quot;:0.549,&#92;&quot;y&#92;&quot;:0.629,&#92;&quot;appID&#92;&quot;:&#92;&quot;68209a325c16386569ba37d3&#92;&quot;,&#92;&quot;widgetName&#92;&quot;:&#92;&quot;Primary Button&#92;&quot;,&#92;&quot;screenName&#92;&quot;:&#92;&quot;Screen&#92;&quot;},{&#92;&quot;_marimo_row_id&#92;&quot;:3,&#92;&quot;session&#92;&quot;:&#92;&quot;S1746967768665_2927&#92;&quot;,&#92;&quot;screen&#92;&quot;:&#92;&quot;s10000_23817&#92;&quot;,&#92;&quot;widget&#92;&quot;:&#92;&quot;w10001_12307&#92;&quot;,&#92;&quot;type&#92;&quot;:&#92;&quot;WidgetClick&#92;&quot;,&#92;&quot;time&#92;&quot;:1746967773369,&#92;&quot;scrollTop&#92;&quot;:0,&#92;&quot;x&#92;&quot;:0.518,&#92;&quot;y&#92;&quot;:0.447,&#92;&quot;appID&#92;&quot;:&#92;&quot;68209a325c16386569ba37d3&#92;&quot;,&#92;&quot;widgetName&#92;&quot;:&#92;&quot;Box&#92;&quot;,&#92;&quot;screenName&#92;&quot;:&#92;&quot;Screen&#92;&quot;},{&#92;&quot;_marimo_row_id&#92;&quot;:4,&#92;&quot;session&#92;&quot;:&#92;&quot;S1746967768665_2927&#92;&quot;,&#92;&quot;screen&#92;&quot;:&#92;&quot;s10000_23817&#92;&quot;,&#92;&quot;widget&#92;&quot;:&#92;&quot;w10002_45621&#92;&quot;,&#92;&quot;type&#92;&quot;:&#92;&quot;WidgetClick&#92;&quot;,&#92;&quot;time&#92;&quot;:1746967774153,&#92;&quot;scrollTop&#92;&quot;:0,&#92;&quot;x&#92;&quot;:0.494,&#92;&quot;y&#92;&quot;:0.64,&#92;&quot;appID&#92;&quot;:&#92;&quot;68209a325c16386569ba37d3&#92;&quot;,&#92;&quot;widgetName&#92;&quot;:&#92;&quot;Primary Button&#92;&quot;,&#92;&quot;screenName&#92;&quot;:&#92;&quot;Screen&#92;&quot;},{&#92;&quot;_marimo_row_id&#92;&quot;:5,&#92;&quot;session&#92;&quot;:&#92;&quot;S1746967768665_2927&#92;&quot;,&#92;&quot;screen&#92;&quot;:&#92;&quot;s10000_23817&#92;&quot;,&#92;&quot;widget&#92;&quot;:&#92;&quot;w10001_12307&#92;&quot;,&#92;&quot;type&#92;&quot;:&#92;&quot;WidgetClick&#92;&quot;,&#92;&quot;time&#92;&quot;:1746967774729,&#92;&quot;scrollTop&#92;&quot;:0,&#92;&quot;x&#92;&quot;:0.474,&#92;&quot;y&#92;&quot;:0.482,&#92;&quot;appID&#92;&quot;:&#92;&quot;68209a325c16386569ba37d3&#92;&quot;,&#92;&quot;widgetName&#92;&quot;:&#92;&quot;Box&#92;&quot;,&#92;&quot;screenName&#92;&quot;:&#92;&quot;Screen&#92;&quot;}]&quot;' data-total-rows='6' data-total-columns='11' data-max-columns='50' data-banner-text='&quot;&quot;' data-pagination='false' data-page-size='10' data-field-types='[[&quot;session&quot;,[&quot;string&quot;,&quot;object&quot;]],[&quot;screen&quot;,[&quot;string&quot;,&quot;object&quot;]],[&quot;widget&quot;,[&quot;string&quot;,&quot;object&quot;]],[&quot;type&quot;,[&quot;string&quot;,&quot;object&quot;]],[&quot;time&quot;,[&quot;integer&quot;,&quot;int64&quot;]],[&quot;scrollTop&quot;,[&quot;integer&quot;,&quot;int64&quot;]],[&quot;x&quot;,[&quot;number&quot;,&quot;float64&quot;]],[&quot;y&quot;,[&quot;number&quot;,&quot;float64&quot;]],[&quot;appID&quot;,[&quot;string&quot;,&quot;object&quot;]],[&quot;widgetName&quot;,[&quot;string&quot;,&quot;object&quot;]],[&quot;screenName&quot;,[&quot;string&quot;,&quot;object&quot;]]]' data-selection='&quot;multi&quot;' data-show-filters='true' data-show-download='true' data-show-column-summaries='false' data-show-data-types='true' data-show-page-size-selector='true' data-show-column-explorer='false' data-show-chart-builder='false' data-row-headers='[]' data-has-stable-row-id='true' data-lazy='false' data-preload='false'></marimo-table></marimo-ui-element></div><div><span class=\"markdown prose dark:prose-invert\"><span class=\"paragraph\">всего кликов 6</span></span></div></marimo-accordion>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "mo.md(\"Ваш стартап начал разрабатывать прототип пользовательского интерфейса с учётом сбора данных о взаимодействии пользователя с приложением\")\n",
        "clicks_df=pd.DataFrame.from_dict([\n",
        "  {\n",
        "    \"session\": \"S1746967768665_2927\",\n",
        "    \"screen\": \"s10000_23817\",\n",
        "    \"widget\": \"w10002_45621\",\n",
        "    \"type\": \"WidgetClick\",\n",
        "    \"time\": 1746967770281,\n",
        "    \"scrollTop\": 0,\n",
        "    \"x\": 0.506,\n",
        "    \"y\": 0.629,\n",
        "    \"appID\": \"68209a325c16386569ba37d3\",\n",
        "    \"widgetName\": \"Primary Button\",\n",
        "    \"screenName\": \"Screen\"\n",
        "  },\n",
        "  {\n",
        "    \"session\": \"S1746967768665_2927\",\n",
        "    \"screen\": \"s10000_23817\",\n",
        "    \"widget\": \"w10001_12307\",\n",
        "    \"type\": \"WidgetClick\",\n",
        "    \"time\": 1746967771832,\n",
        "    \"scrollTop\": 0,\n",
        "    \"x\": 0.514,\n",
        "    \"y\": 0.453,\n",
        "    \"appID\": \"68209a325c16386569ba37d3\",\n",
        "    \"widgetName\": \"Box\",\n",
        "    \"screenName\": \"Screen\"\n",
        "  },\n",
        "  {\n",
        "    \"session\": \"S1746967768665_2927\",\n",
        "    \"screen\": \"s10000_23817\",\n",
        "    \"widget\": \"w10002_45621\",\n",
        "    \"type\": \"WidgetClick\",\n",
        "    \"time\": 1746967772625,\n",
        "    \"scrollTop\": 0,\n",
        "    \"x\": 0.549,\n",
        "    \"y\": 0.629,\n",
        "    \"appID\": \"68209a325c16386569ba37d3\",\n",
        "    \"widgetName\": \"Primary Button\",\n",
        "    \"screenName\": \"Screen\"\n",
        "  },\n",
        "  {\n",
        "    \"session\": \"S1746967768665_2927\",\n",
        "    \"screen\": \"s10000_23817\",\n",
        "    \"widget\": \"w10001_12307\",\n",
        "    \"type\": \"WidgetClick\",\n",
        "    \"time\": 1746967773369,\n",
        "    \"scrollTop\": 0,\n",
        "    \"x\": 0.518,\n",
        "    \"y\": 0.447,\n",
        "    \"appID\": \"68209a325c16386569ba37d3\",\n",
        "    \"widgetName\": \"Box\",\n",
        "    \"screenName\": \"Screen\"\n",
        "  },\n",
        "  {\n",
        "    \"session\": \"S1746967768665_2927\",\n",
        "    \"screen\": \"s10000_23817\",\n",
        "    \"widget\": \"w10002_45621\",\n",
        "    \"type\": \"WidgetClick\",\n",
        "    \"time\": 1746967774153,\n",
        "    \"scrollTop\": 0,\n",
        "    \"x\": 0.494,\n",
        "    \"y\": 0.64,\n",
        "    \"appID\": \"68209a325c16386569ba37d3\",\n",
        "    \"widgetName\": \"Primary Button\",\n",
        "    \"screenName\": \"Screen\"\n",
        "  },\n",
        "  {\n",
        "    \"session\": \"S1746967768665_2927\",\n",
        "    \"screen\": \"s10000_23817\",\n",
        "    \"widget\": \"w10001_12307\",\n",
        "    \"type\": \"WidgetClick\",\n",
        "    \"time\": 1746967774729,\n",
        "    \"scrollTop\": 0,\n",
        "    \"x\": 0.474,\n",
        "    \"y\": 0.482,\n",
        "    \"appID\": \"68209a325c16386569ba37d3\",\n",
        "    \"widgetName\": \"Box\",\n",
        "    \"screenName\": \"Screen\"\n",
        "  }\n",
        "])\n",
        "accordion = mo.accordion(\n",
        "    {\n",
        "        \"Создадим прототип\": mo.md(\"\"\"```\n",
        "\n",
        "services:\n",
        "  mongo:\n",
        "    restart: always\n",
        "    container_name: quant-ux-mongo\n",
        "    image: mongo\n",
        "    volumes:\n",
        "      - ./data:/data/db        # pth for the data to be stored and kept on your host machine is on the left side of the \":\"\n",
        "  qux-fe:\n",
        "    restart: always\n",
        "    container_name: quant-ux-frontend\n",
        "    image: bmcgonag/qux-fe\n",
        "    # image: bmcgonag/qux-fe-arm64\n",
        "    environment:\n",
        "      - QUX_PROXY_URL=http://quant-ux-backend:8080        # this is the path the front end uses to talk tot he backend\n",
        "    links:\n",
        "      - mongo\n",
        "      - qux-be\n",
        "    ports:\n",
        "      - 8082:8082        # change the left side port if your host machine already has 8082 in use\n",
        "    depends_on:\n",
        "      - qux-be\n",
        "  qux-be:\n",
        "    restart: always\n",
        "    container_name: quant-ux-backend\n",
        "    image: bmcgonag/qux-be\n",
        "    # image: bmcgonag/qux-be-arm64\n",
        "    environment:\n",
        "      - QUX_HTTP_HOST=http://quant-ux-frontend:8082        # this is the path the backend uses to talk to the front end\n",
        "      - QUX_HTTP_PORT=8080        # This is the port the backend will use\n",
        "      - QUX_MONGO_DB_NAME=quantux        # the database / collection name in mongodb\n",
        "      - QUX_MONGO_TABLE_PREFIX=quantux        # table / document prefix in mongodb\n",
        "      - QUX_MONGO_CONNECTION_STRING=mongodb://quant-ux-mongo:27017        # this assumes your mongodb container will be called \"quant-ux-mongo\" in the docker-compose file\n",
        "      - QUX_MAIL_USER=mail_admin@example.com        # this should be your smtp email user\n",
        "      - QUX_MAIL_PASSWORD=sTr0ngPa55w0Rd        # this should be your smtp email password\n",
        "      - QUX_MAIL_HOST=127.0.0.1        # this should be your smtp host address\n",
        "      - QUX_JWT_PASSWORD=some-long-string-of-mix-case-chars-and-nums        # you should change this to a real JWT secret\n",
        "      - QUX_IMAGE_FOLDER_USER=/qux-images        # just a folder name, change if you like\n",
        "      - QUX_IMAGE_FOLDER_APPS=/qux-image-apps        # just a folder name, change if you like\n",
        "      - QUX_DEBUG=false        # valid values are true or false\n",
        "      - TZ=Europe/Moscow        # change to your timezone\n",
        "    depends_on:\n",
        "      - mongo\n",
        "```\"\"\"),\n",
        "        \"Запустим тест\": mo.md(\"ссылка на [тест](http://45.153.69.219:8082/#/test.html?h=a2aa10aHIk8utSEvpzoSLkesWFHEO2MQUs6nxMFWf0VvfOwpFLIcQFLepIqy&ln=ru)\"),\n",
        "        \"Посмотрим на данные\": mo.ui.table(clicks_df),\n",
        "        \"Посчитаем клики\": mo.md(f\"всего кликов {clicks_df['type'].count()}\")\n",
        "    }\n",
        ")\n",
        "accordion"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "id": "BYtC",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BYtC",
        "outputId": "18998b5e-b2c8-4887-ed58-4a0a4c7c7380"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "модель обучена за: 2.50 секунд на целевую переменную [0, 1]\n",
            "RandomForestClassifier - отчёт по качеству работы модели:\n",
            "                  0     1  accuracy  macro avg  weighted avg\n",
            "precision      1.0   0.0       1.0        0.5          0.99\n",
            "recall         1.0   0.0       1.0        0.5          1.00\n",
            "f1-score       1.0   0.0       1.0        0.5          1.00\n",
            "support    19949.0  51.0       1.0    20000.0      20000.00\n"
          ]
        }
      ],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.model_selection import train_test_split\n",
        "import time\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "X, y = mobile_ads_fraud_dataset.drop(['is_attributed','click_time','attributed_time'], axis=1), mobile_ads_fraud_dataset['is_attributed']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=True)\n",
        "feature_names=X.columns.values.tolist()\n",
        "target_names=y.unique().tolist()\n",
        "clf = RandomForestClassifier(max_depth=2, random_state=0)\n",
        "start = time.monotonic()\n",
        "clf.fit(X_train, y_train)\n",
        "print(f\"модель обучена за: {time.monotonic() - start:.2f} секунд на целевую переменную\",target_names)\n",
        "y_pred = clf.predict(X_test)\n",
        "print(\"RandomForestClassifier - отчёт по качеству работы модели:\\n\",\n",
        "pd.DataFrame(classification_report(y_test, y_pred,  output_dict=True)).head().round(2))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "RGSE",
      "metadata": {
        "marimo": {
          "config": {
            "hide_code": true
          }
        },
        "id": "RGSE"
      },
      "source": [
        "Почему классификатор игнорирует наличие кликов от ботов?\n",
        "\n",
        "Давайте посмотрим на распределение кликов пользователей и ботов."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "id": "Kclp",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kclp",
        "outputId": "efa8a2a6-f23b-4602-a81a-f63130df252d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "is_attributed\n",
            "0    99773\n",
            "1      227\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "print(y.value_counts())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "emfo",
      "metadata": {
        "marimo": {
          "config": {
            "hide_code": true
          }
        },
        "id": "emfo"
      },
      "source": [
        "Сбалансируем клики пользователей и ботов."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "id": "Hstk",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hstk",
        "outputId": "a31163a3-9e71-44ac-fac9-e1b8ad3db9be"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Теперь классы сбалансированы\n",
            "is_attributed\n",
            "0    79822\n",
            "1    79814\n",
            "Name: count, dtype: int64\n",
            "время ресемплинга: 0.26 секунд\n"
          ]
        }
      ],
      "source": [
        "from imblearn.over_sampling import SMOTEN;start1 = time.monotonic()\n",
        "sm = SMOTEN(random_state=42, k_neighbors=2)\n",
        "X_res, y_res = sm.fit_resample(X, y)\n",
        "X_trainb, X_testb, y_trainb, y_testb = train_test_split(X_res, y_res, test_size=.2, shuffle=True, random_state=42)\n",
        "print(f\"\"\"Теперь классы сбалансированы\\n{y_trainb.value_counts()}\\nвремя ресемплинга: {time.monotonic() - start1:.2f} секунд\"\"\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "nWHF",
      "metadata": {
        "marimo": {
          "config": {
            "hide_code": true
          }
        },
        "id": "nWHF"
      },
      "source": [
        "### **Задание 2**\n",
        "\n",
        "Объясните, чем метод [SMOTEN](https://imbalanced-learn.org/stable/references/generated/imblearn.over_sampling.SMOTEN.html) отличается от метода [resample](https://scikit-learn.org/stable/modules/generated/sklearn.utils.resample.html)?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "iLit",
      "metadata": {
        "marimo": {
          "name": "task2"
        },
        "id": "iLit"
      },
      "source": [
        "          напишите свой ответ здесь `SMOTEN в отличие от resample генерирует новые, разнообразные, но похожие синтетические данные, тогда как resample (oversampling) нагенерит \"дубликатов\" и есть риск переобучения`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "id": "ZHCJ",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZHCJ",
        "outputId": "16edd7ee-832e-432b-de38-33b500cca240"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "модель обучена за: 4.35 секунд на целевую переменную [0, 1]\n",
            "RandomForestClassifier - отчет по качеству работы модели:\n",
            "                   0         1  accuracy  macro avg  weighted avg\n",
            "precision      0.76      0.86       0.8       0.81          0.81\n",
            "recall         0.88      0.72       0.8       0.80          0.80\n",
            "f1-score       0.82      0.78       0.8       0.80          0.80\n",
            "support    19951.00  19959.00       0.8   39910.00      39910.00 \n",
            "\n",
            " теперь все нормально - наш классификатор показывает схожую точность на кликах и пользователей, и ботов\n"
          ]
        }
      ],
      "source": [
        "clfb = RandomForestClassifier(max_depth=2, random_state=0)\n",
        "start2 = time.monotonic()\n",
        "clfb.fit(X_trainb, y_trainb)\n",
        "print(f\"модель обучена за: {time.monotonic() - start2:.2f} секунд на целевую переменную\",target_names)\n",
        "y_predb = clfb.predict(X_testb)\n",
        "print(\"RandomForestClassifier - отчет по качеству работы модели:\\n\",\n",
        "pd.DataFrame(classification_report(y_testb, y_predb,  output_dict=True)).head().round(2),\n",
        "     \"\\n\\n теперь все нормально - наш классификатор показывает схожую точность на кликах и пользователей, и ботов\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "id": "ROlb",
      "metadata": {
        "id": "ROlb"
      },
      "outputs": [],
      "source": [
        "# поскольку ресемплинг большого набора данных может занять продолжительное время, имеет смысл сохранить сбалансированные классы\n",
        "with open('X_res.npy', 'wb') as f:np.save(f, X_res)\n",
        "with open('y_res.npy', 'wb') as f:np.save(f, y_res)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "id": "qnkX",
      "metadata": {
        "marimo": {
          "config": {
            "hide_code": true
          }
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "qnkX",
        "outputId": "63a32639-089b-4967-ef41-be3a341b2f6f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Html()"
            ],
            "text/html": [
              "<marimo-callout-output data-html='&quot;&lt;span class=&#92;&quot;markdown prose dark:prose-invert&#92;&quot;&gt;&lt;span class=&#92;&quot;paragraph&#92;&quot;&gt;Давайте вспомним вывод, к которому мы пришли в ходе выполнения домашнего задания №1: &lt;strong&gt;хранить данные на локальном диске — это плохая идея&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&quot;' data-kind='&quot;danger&quot;'></marimo-callout-output>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "callout = mo.callout(mo.md(r\"\"\"Давайте вспомним вывод, к которому мы пришли в ходе выполнения домашнего задания №1: **хранить данные на локальном диске — это плохая идея**\"\"\"), kind=\"danger\")\n",
        "callout"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "TqIu",
      "metadata": {
        "marimo": {
          "config": {
            "hide_code": true
          }
        },
        "id": "TqIu"
      },
      "source": [
        "### **Задание 3**\n",
        "\n",
        "Сохраните результат своей работы (артефакт — ресемплированный большой набор данных) в 2 базы данных (MySQL и PostgreSQL), чтобы дать возможность коллегам пользоваться артефактом и удобно с ним работать. Логин/пароль для доступа в базу вы получили на вебинаре №2."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "id": "Vxnm",
      "metadata": {
        "marimo": {
          "name": "task3"
        },
        "id": "Vxnm"
      },
      "outputs": [],
      "source": [
        "#Напишите свой код здесь\n",
        "\n",
        "# !pip install mysql-connector-python\n",
        "\n",
        "from google.colab import userdata\n",
        "mysql_password = userdata.get('hw-2-mysql-pass')\n",
        "pg_password = userdata.get('hw-2-pg-pass')\n",
        "\n",
        "import mysql.connector\n",
        "import psycopg2 # библиотека-адаптер для python ←→ postgresql\n",
        "import pandas as pd\n",
        "from sqlalchemy import create_engine\n",
        "\n",
        "def db_save():\n",
        "    # Загрузка данных\n",
        "    with open('X_res.npy', 'rb') as f:\n",
        "        X_res = np.load(f)\n",
        "    with open('y_res.npy', 'rb') as f:\n",
        "        y_res = np.load(f)\n",
        "\n",
        "    # Преобразование в df\n",
        "    df = pd.DataFrame(X_res)\n",
        "    df['is_attributed'] = y_res\n",
        "\n",
        "# Подключение к MySQL\n",
        "    # mysql -u gen_user -p`mysql_password` -h 109.196.101.76 -P 3306 -D default_db\n",
        "\n",
        "\n",
        "    mysql_start = time.time() # для замера времени выполнения\n",
        "\n",
        "\n",
        "    # используем инструмент sqlalchemy\n",
        "    mysql_engine = create_engine(\n",
        "        f\"mysql+mysqlconnector://gen_user:{mysql_password}@109.196.101.76:3306/default_db\"\n",
        "\n",
        "    )\n",
        "    # mysql_conn = mysql.connector.connect(\n",
        "    #    user =\"gen_user\",\n",
        "    #    password = mysql_password,\n",
        "    #    host = \"109.196.101.76\",\n",
        "    #    port = \"3306\",\n",
        "    #    database = \"default_db\"\n",
        "    #)\n",
        "\n",
        "    # Сохранение в MySQL; `to_sql` - pandas метод для SQLAlchemy\n",
        "    df.to_sql('mobile_ads_fraud_balanced', mysql_engine, if_exists='replace', index=False)\n",
        "\n",
        "    mysql_time = time.time() - mysql_start # для замера времени выполнения\n",
        "\n",
        "# Подключение к PostgreSQL\n",
        "    # psql 'postgresql://gen_user:`pg_password`@5.129.243.127:5432/default_db'\n",
        "\n",
        "    pg_start = time.time() # для замера времени выполнения\n",
        "\n",
        "    pg_engine = create_engine(\n",
        "        f\"postgresql+psycopg2://gen_user:{pg_password}@5.129.243.127:5432/default_db\"\n",
        "    )\n",
        "\n",
        "    # используем инструмент sqlalchemy\n",
        "    # pg_conn = psycopg2.connect(\n",
        "    #    user = \"gen_user\",\n",
        "    #    password = pg_password,\n",
        "    #    host = \"5.129.243.127\",\n",
        "    #    port = \"5432\",\n",
        "    #    database = \"default_db\"\n",
        "    #)\n",
        "\n",
        "    # Сохранение в PostgreSQL; `to_sql` - pandas метод для SQLAlchemy\n",
        "    df.to_sql('mobile_ads_fraud_balanced', pg_engine, if_exists='replace', index=False)\n",
        "\n",
        "    pg_time = time.time() - pg_start\n",
        "\n",
        "    # Закрытие соединения\n",
        "    mysql_engine.dispose() # .close() как альтернатива\n",
        "    pg_engine.dispose()\n",
        "\n",
        "    return mysql_time, pg_time"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Запуск функции db_save и подсчет времени\n",
        "mysql_time, pg_time = db_save()"
      ],
      "metadata": {
        "id": "-mpJiIdbOHjb"
      },
      "id": "-mpJiIdbOHjb",
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Сравнение скорости\n",
        "\n",
        "print(f\"Время на запись MySQL: {mysql_time:.2f} сек\")\n",
        "print(f\"Время на запись PostgreSQL: {pg_time:.2f} сек\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QX88E_sIPdBY",
        "outputId": "d93665c9-b095-4f22-9afe-7b84034382b4"
      },
      "id": "QX88E_sIPdBY",
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Время на запись MySQL: 15.54 сек\n",
            "Время на запись PostgreSQL: 35.70 сек\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "DnEU",
      "metadata": {
        "marimo": {
          "config": {
            "hide_code": true
          }
        },
        "id": "DnEU"
      },
      "source": [
        "### **Задание 4**\n",
        "\n",
        "Если мы точно не знаем, в какую базу писать, то [«не стоит плодить таблицы без необходимости»](https://ru.wikipedia.org/wiki/%D0%91%D1%80%D0%B8%D1%82%D0%B2%D0%B0_%D0%9E%D0%BA%D0%BA%D0%B0%D0%BC%D0%B0). Сохраним данные в хранилище S3.\n",
        "\n",
        "Реализуйте сохранение артефакта (ресемплированного большого набора данных) в хранилище S3.\n",
        "Сравните скорость записи в SQL и в хранилище S3."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "id": "ulZA",
      "metadata": {
        "marimo": {
          "name": "task4"
        },
        "id": "ulZA"
      },
      "outputs": [],
      "source": [
        "# напишите свой код здесь\n",
        "\n",
        "# !pip install boto3\n",
        "\n",
        "import boto3\n",
        "from botocore.exceptions import NoCredentialsError\n",
        "from botocore.client import Config\n",
        "import time\n",
        "\n",
        "s3_password = userdata.get('hw-2-s3-pass')\n",
        "\n",
        "def s3_save():\n",
        "    # Загрузка данных\n",
        "    with open('X_res.npy', 'rb') as f:\n",
        "        X_res = np.load(f)\n",
        "    with open('y_res.npy', 'rb') as f:\n",
        "        y_res = np.load(f)\n",
        "\n",
        "    # Сохранение в сжатый файл встроенным инструментом numpy\n",
        "    # https://numpy.org/devdocs/reference/generated/numpy.savez.html\n",
        "    np.savez('resemp_dataset.npz', X_res=X_res, y_res=y_res)\n",
        "\n",
        "    # Настройка S3 клиента\n",
        "    # S3 minio_user:`s3_password` http://45.153.68.194:9001/browser/firstbucket250915\n",
        "    s3 = boto3.client('s3',\n",
        "                      aws_access_key_id = 'minio_user', # логин\n",
        "                      aws_secret_access_key = s3_password, # пароль\n",
        "                      endpoint_url = \"http://45.153.68.194:9000\", # Изменено на 9000, т.к. ошибка `S3 API Requests must be made to API port`\n",
        "                      config=Config(signature_version='s3v4')\n",
        "                      )\n",
        "\n",
        "    start_time = time.time() # Замер времени записи в S3\n",
        "\n",
        "    s3.upload_file('resemp_dataset.npz', 'firstbucket250915', 'resemp_dataset.npz')\n",
        "\n",
        "    s3_time = time.time() - start_time # Замер времени записи в S3\n",
        "\n",
        "    return s3_time"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Запуск записи в s3 и сравнение скорости\n",
        "s3_time = s3_save()"
      ],
      "metadata": {
        "id": "RIE-ih7EWd_s"
      },
      "id": "RIE-ih7EWd_s",
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Время на запись MySQL: {mysql_time:.2f} сек\")\n",
        "print(f\"Время на запись PostgreSQL: {pg_time:.2f} сек\")\n",
        "print(f\"Время на запись s3: {s3_time:.2f} сек\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uuVthnlOaTHC",
        "outputId": "f871463a-4439-42b7-cba4-40a72b7903de"
      },
      "id": "uuVthnlOaTHC",
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Время на запись MySQL: 15.54 сек\n",
            "Время на запись PostgreSQL: 35.70 сек\n",
            "Время на запись s3: 8.53 сек\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ecfG",
      "metadata": {
        "marimo": {
          "config": {
            "hide_code": true
          }
        },
        "id": "ecfG"
      },
      "source": [
        "### **Задание 5**\n",
        "\n",
        "Как бы вы реализовали сохранение полученной модели классификатора с учетом того, что данные, на которых обучалась модель, могут со временем изменяться?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "id": "Pvdt",
      "metadata": {
        "marimo": {
          "name": "task5"
        },
        "id": "Pvdt"
      },
      "outputs": [],
      "source": [
        "# напишите свой код здесь\n",
        "\n",
        "def task5():\n",
        "    \"\"\"\n",
        "    Стратегия сохранения модели с учетом изменяющихся данных:\n",
        "    1. Версионирование моделей с метаданными (дата обучения, метрики)\n",
        "    2. Реализация пайплайна переобучения по расписанию или при дрифте данных\n",
        "    3. Хранение моделей в S3 или ML-специфичных хранилищах (MLflow, Weights & Biases)\n",
        "    4. Мониторинг качества модели на новых данных\n",
        "    \"\"\"\n",
        "\n",
        "    # Пример сохранения модели с версионированием\n",
        "    import joblib\n",
        "    from datetime import datetime\n",
        "\n",
        "    # Сохранение модели с временной меткой\n",
        "    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
        "    model_filename = f\"random_forest_model_{timestamp}.joblib\"\n",
        "    joblib.dump(clfb, model_filename)\n",
        "\n",
        "    # Также можно сохранять в S3 с версионированием\n",
        "    s3.upload_file(model_filename, 'your-models-bucket', f'models/{model_filename}')"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "language_info": {
      "name": "python"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
